!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
BUFFER_SIZE	ModelRead.h	8;"	d
CC	Makefile	/^CC=g++$/;"	m
CONN_FATAL	common.h	55;"	d
CONN_OK	common.h	56;"	d
CONN_TRANSIENT	common.h	57;"	d
CXXFLAGS	Makefile	/^CXXFLAGS=-O2 -D_FILE_OFFSET_BITS=64 $/;"	m
FIFO	ModelRead.h	/^		const char *FIFO;$/;"	m	class:ModelRead
INCLUDE	Makefile	/^INCLUDE=-I\/usr\/local\/dip\/depsys\/fb303-thrift-0.4.0\/include\/thrift\/fb303 -I\/usr\/local\/dip\/depsys\/thrift-0.4.0\/include\/thrift -I\/usr\/local\/dip\/depsys\/libcurl\/include                                                                                                                                                                   $/;"	m
LDFLAGS	Makefile	/^LDFLAGS=\/usr\/local\/dip\/depsys\/fb303-thrift-0.4.0\/include\/thrift\/fb303\/lib\/*.a \/usr\/local\/dip\/depsys\/thrift-0.4.0\/include\/thrift\/lib\/*.a $/;"	m
LIBS	Makefile	/^LIBS=-L\/usr\/local\/dip\/depsys\/fb303-thrift-0.4.0\/lib -L\/usr\/local\/dip\/depsys\/thrift-0.4.0\/lib   -lthrift -lfb303 -lpthread -lcurl$/;"	m
LOG_OPER	common.h	45;"	d
Log	scribe.cpp	/^ResultCode scribeClient::Log(const std::vector<LogEntry> & messages)$/;"	f	class:scribe::thrift::scribeClient
Log	scribe.h	/^  ResultCode Log(const std::vector<LogEntry> & \/* messages *\/) {$/;"	f	class:scribe::thrift::scribeNull
Log	scribe.h	/^  ResultCode Log(const std::vector<LogEntry> & messages) {$/;"	f	class:scribe::thrift::scribeMultiface
LogEntry	scribe_types.h	/^  LogEntry() : category(""), message("") {$/;"	f	class:scribe::thrift::LogEntry
LogEntry	scribe_types.h	/^class LogEntry {$/;"	c	namespace:scribe::thrift
ModelRead	ModelRead.cpp	/^ModelRead::ModelRead(){$/;"	f	class:ModelRead
ModelRead	ModelRead.h	/^class ModelRead{$/;"	c
MyThread	thread.cpp	/^class MyThread:public Thread$/;"	c	file:
OK	scribe_types.h	/^  OK = 0,$/;"	e	enum:scribe::thrift::ResultCode
ResultCode	scribe_types.h	/^enum ResultCode {$/;"	g	namespace:scribe::thrift
SOURCE	Makefile	/^SOURCE=conf.cpp ModelRead.cpp dip_logtail_util.cpp scribe.cpp scribe_types.cpp scribe_send.cpp thread.cpp $/;"	m
StringToInt	ModelRead.cpp	/^long long ModelRead::StringToInt(const std::string temp){$/;"	f	class:ModelRead
TRY_LATER	scribe_types.h	/^  TRY_LATER = 1$/;"	e	enum:scribe::thrift::ResultCode
Thread	thread.h	/^class Thread$/;"	c
_LogEntry__isset	scribe_types.h	/^  _LogEntry__isset() : category(false), message(false) {}$/;"	f	struct:scribe::thrift::_LogEntry__isset
_LogEntry__isset	scribe_types.h	/^typedef struct _LogEntry__isset {$/;"	s	namespace:scribe::thrift
_LogEntry__isset	scribe_types.h	/^} _LogEntry__isset;$/;"	t	namespace:scribe::thrift	typeref:struct:scribe::thrift::_LogEntry__isset
__isset	scribe.h	/^  _scribe_Log_args__isset __isset;$/;"	m	class:scribe::thrift::scribe_Log_args
__isset	scribe.h	/^  _scribe_Log_presult__isset __isset;$/;"	m	class:scribe::thrift::scribe_Log_presult
__isset	scribe.h	/^  _scribe_Log_result__isset __isset;$/;"	m	class:scribe::thrift::scribe_Log_result
__isset	scribe_types.h	/^  _LogEntry__isset __isset;$/;"	m	class:scribe::thrift::LogEntry
_scribe_Log_args__isset	scribe.h	/^  _scribe_Log_args__isset() : messages(false) {}$/;"	f	struct:scribe::thrift::_scribe_Log_args__isset
_scribe_Log_args__isset	scribe.h	/^typedef struct _scribe_Log_args__isset {$/;"	s	namespace:scribe::thrift
_scribe_Log_args__isset	scribe.h	/^} _scribe_Log_args__isset;$/;"	t	namespace:scribe::thrift	typeref:struct:scribe::thrift::_scribe_Log_args__isset
_scribe_Log_presult__isset	scribe.h	/^  _scribe_Log_presult__isset() : success(false) {}$/;"	f	struct:scribe::thrift::_scribe_Log_presult__isset
_scribe_Log_presult__isset	scribe.h	/^typedef struct _scribe_Log_presult__isset {$/;"	s	namespace:scribe::thrift
_scribe_Log_presult__isset	scribe.h	/^} _scribe_Log_presult__isset;$/;"	t	namespace:scribe::thrift	typeref:struct:scribe::thrift::_scribe_Log_presult__isset
_scribe_Log_result__isset	scribe.h	/^  _scribe_Log_result__isset() : success(false) {}$/;"	f	struct:scribe::thrift::_scribe_Log_result__isset
_scribe_Log_result__isset	scribe.h	/^typedef struct _scribe_Log_result__isset {$/;"	s	namespace:scribe::thrift
_scribe_Log_result__isset	scribe.h	/^} _scribe_Log_result__isset;$/;"	t	namespace:scribe::thrift	typeref:struct:scribe::thrift::_scribe_Log_result__isset
accesskey	ModelRead.h	/^		std::string accesskey;$/;"	m	class:ModelRead
add	scribe.h	/^  void add(boost::shared_ptr<scribeIf> iface) {$/;"	f	class:scribe::thrift::scribeMultiface
alarmPostPrefix	ModelRead.h	/^		std::string alarmPostPrefix;$/;"	m	class:ModelRead
alarmURL	ModelRead.h	/^		std::string alarmURL;$/;"	m	class:ModelRead
alarm_timeout	ModelRead.h	/^		unsigned long  alarm_timeout;$/;"	m	class:ModelRead
an	dip_logtail_util.h	/^		std::string an;$/;"	m	class:dip_logtail_util
ascii_fingerprint	scribe_types.cpp	/^const char* LogEntry::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";$/;"	m	class:scribe::thrift::LogEntry	file:
ascii_fingerprint	scribe_types.h	/^  static const char* ascii_fingerprint; \/\/ = "07A9615F837F7D0A952B595DD3020972";$/;"	m	class:scribe::thrift::LogEntry
backup_path	ModelRead.h	/^		std::string backup_path;$/;"	m	class:ModelRead
binary_fingerprint	scribe_types.cpp	/^const uint8_t LogEntry::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};$/;"	m	class:scribe::thrift::LogEntry	file:
binary_fingerprint	scribe_types.h	/^  static const uint8_t binary_fingerprint[16]; \/\/ = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};$/;"	m	class:scribe::thrift::LogEntry
category	ModelRead.h	/^		std::string category;$/;"	m	class:ModelRead
category	scribe_types.h	/^  bool category;$/;"	m	struct:scribe::thrift::_LogEntry__isset
category	scribe_types.h	/^  std::string category;$/;"	m	class:scribe::thrift::LogEntry
checkpoint_time	ModelRead.h	/^		long long checkpoint_time;$/;"	m	class:ModelRead
close	scribe_send.cpp	/^void scribe_send::close(){$/;"	f	class:scribe_send
conf	conf.cpp	/^conf::conf(){$/;"	f	class:conf
conf	conf.h	/^class conf{$/;"	c
create_dir	ModelRead.cpp	/^void ModelRead::create_dir(const std::string dir_name){$/;"	f	class:ModelRead
defaultmail	ModelRead.h	/^		std::string defaultmail;$/;"	m	class:ModelRead
defaultphone	ModelRead.h	/^		std::string defaultphone;$/;"	m	class:ModelRead
dip_logtail_alarm_interface	ModelRead.cpp	/^void ModelRead::dip_logtail_alarm_interface(std::string message,std::string subject){$/;"	f	class:ModelRead
dip_logtail_alarm_libcurlinterface	ModelRead.cpp	/^void ModelRead::dip_logtail_alarm_libcurlinterface(std::string message,std::string subject){$/;"	f	class:ModelRead
dip_logtail_util	dip_logtail_util.cpp	/^dip_logtail_util::dip_logtail_util(){$/;"	f	class:dip_logtail_util
dip_logtail_util	dip_logtail_util.h	/^class dip_logtail_util{$/;"	c
eth0_ip	dip_logtail_util.h	/^		std::string eth0_ip;$/;"	m	class:dip_logtail_util
fd	ModelRead.h	/^		int fd;$/;"	m	class:ModelRead
from	ModelRead.h	/^        std::string from;$/;"	m	class:ModelRead
getConfmodels	conf.cpp	/^string_map_model conf::getConfmodels(){$/;"	f	class:conf
getInputProtocol	scribe.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:scribe::thrift::scribeClient
getOutputProtocol	scribe.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:scribe::thrift::scribeClient
getString	ModelRead.cpp	/^bool ModelRead::getString(const std::string &stringName,std::string& _returnvalue){$/;"	f	class:ModelRead
getString	conf.cpp	/^bool conf::getString(const std::string& stringName,string_map_t& _return){$/;"	f	class:conf
get_an	dip_logtail_util.cpp	/^std::string dip_logtail_util::get_an(){$/;"	f	class:dip_logtail_util
get_ip	dip_logtail_util.cpp	/^std::string dip_logtail_util::get_ip(){$/;"	f	class:dip_logtail_util
get_local_an	dip_logtail_util.cpp	/^void  dip_logtail_util::get_local_an(){$/;"	f	class:dip_logtail_util
get_local_ip	dip_logtail_util.cpp	/^void  dip_logtail_util::get_local_ip(){$/;"	f	class:dip_logtail_util
getcheckpoint	conf.cpp	/^bool conf::getcheckpoint(const std::string t_modelname,std::map<std::string,std::string>& _return_map){$/;"	f	class:conf
host	ModelRead.h	/^		std::string host;$/;"	m	class:ModelRead
host	scribe_send.h	/^		std::string host;$/;"	m	class:scribe_send
iface_	scribe.h	/^  boost::shared_ptr<scribeIf> iface_;$/;"	m	class:scribe::thrift::scribeProcessor
ifaces_	scribe.h	/^  std::vector<boost::shared_ptr<scribeIf> > ifaces_;$/;"	m	class:scribe::thrift::scribeMultiface
isOpen	scribe_send.cpp	/^bool scribe_send::isOpen(){$/;"	f	class:scribe_send
isdir	ModelRead.cpp	/^bool ModelRead::isdir(std::string path){$/;"	f	class:ModelRead
isreload	ModelRead.h	/^		bool isreload;$/;"	m	class:ModelRead
local_an	ModelRead.h	/^		std::string local_an;$/;"	m	class:ModelRead
local_eth0_ip	ModelRead.h	/^		std::string local_eth0_ip;$/;"	m	class:ModelRead
log_prefix	ModelRead.h	/^		std::string log_prefix;$/;"	m	class:ModelRead
log_server_port	ModelRead.h	/^		std::string log_server_port;$/;"	m	class:ModelRead
logfilename	ModelRead.h	/^		const char *logfilename;$/;"	m	class:ModelRead
logreadfile	ModelRead.h	/^		std::ifstream logreadfile;$/;"	m	class:ModelRead
logtail_File	ModelRead.cpp	/^void ModelRead::logtail_File(){$/;"	f	class:ModelRead
mailto_alarm	ModelRead.h	/^		std::string mailto_alarm;$/;"	m	class:ModelRead
main	thread.cpp	/^int main(int argc,char **argv){$/;"	f
make_prefix_category	ModelRead.cpp	/^void ModelRead::make_prefix_category(){$/;"	f	class:ModelRead
max_send_msg	ModelRead.h	/^		long max_send_msg;$/;"	m	class:ModelRead
message	scribe_types.h	/^  bool message;$/;"	m	struct:scribe::thrift::_LogEntry__isset
message	scribe_types.h	/^  std::string message;$/;"	m	class:scribe::thrift::LogEntry
message_queue	ModelRead.h	/^		std::queue<std::string> message_queue;$/;"	m	class:ModelRead
messages	scribe.h	/^  bool messages;$/;"	m	struct:scribe::thrift::_scribe_Log_args__isset
messages	scribe.h	/^  const std::vector<LogEntry> * messages;$/;"	m	class:scribe::thrift::scribe_Log_pargs
messages	scribe.h	/^  std::vector<LogEntry>  messages;$/;"	m	class:scribe::thrift::scribe_Log_args
messages	scribe_send.h	/^		std::vector<LogEntry> messages;$/;"	m	class:scribe_send
model	thread.cpp	/^		ModelRead *model;$/;"	m	class:MyThread	file:
modelconfig	ModelRead.h	/^		std::map<std::string,std::string> modelconfig;$/;"	m	class:ModelRead
modelname	ModelRead.h	/^		 std::string modelname;$/;"	m	class:ModelRead
models	conf.h	/^		string_map_model models;$/;"	m	class:conf
mythread_join	thread.h	/^void Thread::mythread_join(){$/;"	f	class:Thread
n_stat	ModelRead.h	/^		 struct stat n_stat;  $/;"	m	class:ModelRead	typeref:struct:ModelRead::stat
now	ModelRead.h	/^		time_t now;$/;"	m	class:ModelRead
o_stat	ModelRead.h	/^		 struct stat o_stat;$/;"	m	class:ModelRead	typeref:struct:ModelRead::stat
open	scribe_send.cpp	/^bool scribe_send::open(){$/;"	f	class:scribe_send
openFIFOFile	ModelRead.cpp	/^bool ModelRead::openFIFOFile(){$/;"	f	class:ModelRead
openLogFile	ModelRead.cpp	/^bool ModelRead::openLogFile(){$/;"	f	class:ModelRead
operator !=	scribe.h	/^  bool operator != (const scribe_Log_args &rhs) const {$/;"	f	class:scribe::thrift::scribe_Log_args
operator !=	scribe.h	/^  bool operator != (const scribe_Log_result &rhs) const {$/;"	f	class:scribe::thrift::scribe_Log_result
operator !=	scribe_types.h	/^  bool operator != (const LogEntry &rhs) const {$/;"	f	class:scribe::thrift::LogEntry
operator ==	scribe.h	/^  bool operator == (const scribe_Log_args & rhs) const$/;"	f	class:scribe::thrift::scribe_Log_args
operator ==	scribe.h	/^  bool operator == (const scribe_Log_result & rhs) const$/;"	f	class:scribe::thrift::scribe_Log_result
operator ==	scribe_types.h	/^  bool operator == (const LogEntry & rhs) const$/;"	f	class:scribe::thrift::LogEntry
parseConfig	conf.cpp	/^void conf::parseConfig(const std::string &filename){$/;"	f	class:conf
parseModel	ModelRead.cpp	/^bool ModelRead::parseModel(){$/;"	f	class:ModelRead
parseModel	conf.cpp	/^bool conf::parseModel(\/*in,out*\/ std::queue<std::string>& raw_config,\/*out*\/ conf* parsed_config){$/;"	f	class:conf
pass_time	ModelRead.h	/^        long long pass_time;$/;"	m	class:ModelRead
path	ModelRead.h	/^        std::string path;$/;"	m	class:ModelRead
phone_alarm	ModelRead.h	/^		std::string phone_alarm;$/;"	m	class:ModelRead
pid	thread.h	/^        pthread_t pid;$/;"	m	class:Thread
port	ModelRead.h	/^		std::string port;$/;"	m	class:ModelRead
port	scribe_send.h	/^		int  port;$/;"	m	class:scribe_send
position	ModelRead.h	/^		long long position;$/;"	m	class:ModelRead
process	scribe.cpp	/^bool scribeProcessor::process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot) {$/;"	f	class:scribe::thrift::scribeProcessor
processMap_	scribe.h	/^  std::map<std::string, void (scribeProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;$/;"	m	class:scribe::thrift::scribeProcessor
process_Log	scribe.cpp	/^void scribeProcessor::process_Log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot)$/;"	f	class:scribe::thrift::scribeProcessor
process_fn	scribe.cpp	/^bool scribeProcessor::process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid) {$/;"	f	class:scribe::thrift::scribeProcessor
protocol	scribe_send.h	/^        boost::shared_ptr<apache::thrift::protocol::TBinaryProtocol> protocol;$/;"	m	class:scribe_send
read	scribe.cpp	/^uint32_t scribe_Log_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:scribe::thrift::scribe_Log_args
read	scribe.cpp	/^uint32_t scribe_Log_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:scribe::thrift::scribe_Log_presult
read	scribe.cpp	/^uint32_t scribe_Log_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:scribe::thrift::scribe_Log_result
read	scribe_types.cpp	/^uint32_t LogEntry::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:scribe::thrift::LogEntry
readConfFile	conf.cpp	/^bool conf::readConfFile(const std::string& filename, std::queue<std::string>& _return){$/;"	f	class:conf
readFIFO	ModelRead.cpp	/^void ModelRead::readFIFO(){$/;"	f	class:ModelRead
readLogFile	ModelRead.cpp	/^void ModelRead::readLogFile(){$/;"	f	class:ModelRead
read_backupfile	ModelRead.cpp	/^void ModelRead::read_backupfile(){$/;"	f	class:ModelRead
recv_Log	scribe.cpp	/^ResultCode scribeClient::recv_Log()$/;"	f	class:scribe::thrift::scribeClient
reload	ModelRead.cpp	/^void ModelRead::reload(std::map<std::string,std::string> m_checkpoint){$/;"	f	class:ModelRead
run	thread.cpp	/^void MyThread::run()$/;"	f	class:MyThread
scribe	scribe.cpp	/^namespace scribe { namespace thrift {$/;"	n	file:
scribe	scribe.h	/^namespace scribe { namespace thrift {$/;"	n
scribe	scribe_types.cpp	/^namespace scribe { namespace thrift {$/;"	n	file:
scribe	scribe_types.h	/^namespace scribe { namespace thrift {$/;"	n
scribeClient	scribe.h	/^  scribeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :$/;"	f	class:scribe::thrift::scribeClient
scribeClient	scribe.h	/^  scribeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :$/;"	f	class:scribe::thrift::scribeClient
scribeClient	scribe.h	/^class scribeClient : virtual public scribeIf, public facebook::fb303::FacebookServiceClient {$/;"	c	namespace:scribe::thrift
scribeIf	scribe.h	/^class scribeIf : virtual public facebook::fb303::FacebookServiceIf {$/;"	c	namespace:scribe::thrift
scribeMultiface	scribe.h	/^  scribeMultiface() {}$/;"	f	class:scribe::thrift::scribeMultiface
scribeMultiface	scribe.h	/^  scribeMultiface(std::vector<boost::shared_ptr<scribeIf> >& ifaces) : ifaces_(ifaces) {$/;"	f	class:scribe::thrift::scribeMultiface
scribeMultiface	scribe.h	/^class scribeMultiface : virtual public scribeIf, public facebook::fb303::FacebookServiceMultiface {$/;"	c	namespace:scribe::thrift
scribeNull	scribe.h	/^class scribeNull : virtual public scribeIf , virtual public facebook::fb303::FacebookServiceNull {$/;"	c	namespace:scribe::thrift
scribeProcessor	scribe.h	/^  scribeProcessor(boost::shared_ptr<scribeIf> iface) :$/;"	f	class:scribe::thrift::scribeProcessor
scribeProcessor	scribe.h	/^class scribeProcessor : virtual public ::apache::thrift::TProcessor, public facebook::fb303::FacebookServiceProcessor {$/;"	c	namespace:scribe::thrift
scribe_H	scribe.h	7;"	d
scribe_Log_args	scribe.h	/^  scribe_Log_args() {$/;"	f	class:scribe::thrift::scribe_Log_args
scribe_Log_args	scribe.h	/^class scribe_Log_args {$/;"	c	namespace:scribe::thrift
scribe_Log_pargs	scribe.h	/^class scribe_Log_pargs {$/;"	c	namespace:scribe::thrift
scribe_Log_presult	scribe.h	/^class scribe_Log_presult {$/;"	c	namespace:scribe::thrift
scribe_Log_result	scribe.h	/^  scribe_Log_result() {$/;"	f	class:scribe::thrift::scribe_Log_result
scribe_Log_result	scribe.h	/^class scribe_Log_result {$/;"	c	namespace:scribe::thrift
scribe_TYPES_H	scribe_types.h	7;"	d
scribe_inter	ModelRead.h	/^		scribe_send scribe_inter;$/;"	m	class:ModelRead
scribe_send	scribe_send.h	/^class scribe_send{$/;"	c
secrekey	ModelRead.h	/^        std::string secrekey;$/;"	m	class:ModelRead
send	scribe_send.cpp	/^int scribe_send::send(){$/;"	f	class:scribe_send
sendClient	scribe_send.h	/^        boost::shared_ptr<scribe::thrift::scribeClient> sendClient;$/;"	m	class:scribe_send
send_Log	scribe.cpp	/^void scribeClient::send_Log(const std::vector<LogEntry> & messages)$/;"	f	class:scribe::thrift::scribeClient
set	ModelRead.h	/^        std::string set;$/;"	m	class:ModelRead
setModeltime	ModelRead.cpp	/^void ModelRead::setModeltime(){$/;"	f	class:ModelRead
set_host_port_timeout	scribe_send.cpp	/^void scribe_send::set_host_port_timeout(std::string t_host,int t_port,int t_timeout){$/;"	f	class:scribe_send
set_ipandan	ModelRead.cpp	/^void ModelRead::set_ipandan(std::string eth0ip,std::string an){$/;"	f	class:ModelRead
set_modelconfig	ModelRead.cpp	/^void ModelRead::set_modelconfig(const std::map<std::string,std::string>& model_config){$/;"	f	class:ModelRead
setisreload	ModelRead.cpp	/^void ModelRead::setisreload(bool t_isreload){$/;"	f	class:ModelRead
setmodel	thread.cpp	/^void MyThread::setmodel(ModelRead *t_model){$/;"	f	class:MyThread
setmodelname	ModelRead.cpp	/^void ModelRead::setmodelname(const std::string t_modelname){$/;"	f	class:ModelRead
socket	scribe_send.h	/^		boost::shared_ptr<apache::thrift::transport::TSocket> socket;$/;"	m	class:scribe_send
start	ModelRead.cpp	/^void ModelRead::start(){$/;"	f	class:ModelRead
start	thread.h	/^int Thread::start()$/;"	f	class:Thread
start_thread	thread.h	/^void* Thread::start_thread(void *arg) \/\/静态成员函数只能访问静态变量或静态函数，通过传递this指针进行调用$/;"	f	class:Thread
stillGood	ModelRead.cpp	/^void ModelRead::stillGood(){$/;"	f	class:ModelRead
string_map_model	conf.h	/^typedef std::map<std::string,string_map_t> string_map_model;    \/\/声明一个config下所有的models的map$/;"	t
string_map_t	conf.h	/^typedef std::map<std::string,std::string> string_map_t;   		\/\/声明一个Model下的存储配置文件键值对的map$/;"	t
success	scribe.h	/^  ResultCode success;$/;"	m	class:scribe::thrift::scribe_Log_result
success	scribe.h	/^  ResultCode* success;$/;"	m	class:scribe::thrift::scribe_Log_presult
success	scribe.h	/^  bool success;$/;"	m	struct:scribe::thrift::_scribe_Log_presult__isset
success	scribe.h	/^  bool success;$/;"	m	struct:scribe::thrift::_scribe_Log_result__isset
thrift	scribe.cpp	/^namespace scribe { namespace thrift {$/;"	n	namespace:scribe	file:
thrift	scribe.h	/^namespace scribe { namespace thrift {$/;"	n	namespace:scribe
thrift	scribe_types.cpp	/^namespace scribe { namespace thrift {$/;"	n	namespace:scribe	file:
thrift	scribe_types.h	/^namespace scribe { namespace thrift {$/;"	n	namespace:scribe
timeout	ModelRead.h	/^		std::string timeout;$/;"	m	class:ModelRead
timeout	scribe_send.h	/^		int  timeout;$/;"	m	class:scribe_send
transport	scribe_send.h	/^        boost::shared_ptr<apache::thrift::transport::TFramedTransport> transport;$/;"	m	class:scribe_send
trimString	conf.cpp	/^std::string conf::trimString(const std::string& str){$/;"	f	class:conf
trim_String	dip_logtail_util.cpp	/^std::string dip_logtail_util::trim_String(const std::string& str){$/;"	f	class:dip_logtail_util
type	ModelRead.h	/^        std::string type;$/;"	m	class:ModelRead
use_util	dip_logtail_util.cpp	/^void dip_logtail_util::use_util(){$/;"	f	class:dip_logtail_util
write	scribe.cpp	/^uint32_t scribe_Log_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:scribe::thrift::scribe_Log_args
write	scribe.cpp	/^uint32_t scribe_Log_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:scribe::thrift::scribe_Log_pargs
write	scribe.cpp	/^uint32_t scribe_Log_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:scribe::thrift::scribe_Log_result
write	scribe_types.cpp	/^uint32_t LogEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:scribe::thrift::LogEntry
write_checkpoint	ModelRead.cpp	/^void ModelRead::write_checkpoint(){$/;"	f	class:ModelRead
write_pid	thread.cpp	/^void write_pid()$/;"	f
~LogEntry	scribe_types.h	/^  virtual ~LogEntry() throw() {}$/;"	f	class:scribe::thrift::LogEntry
~ModelRead	ModelRead.cpp	/^ModelRead::~ModelRead(){$/;"	f	class:ModelRead
~MyThread	thread.cpp	/^MyThread::~MyThread(){$/;"	f	class:MyThread
~conf	conf.cpp	/^conf::~conf(){$/;"	f	class:conf
~dip_logtail_util	dip_logtail_util.cpp	/^dip_logtail_util::~dip_logtail_util(){$/;"	f	class:dip_logtail_util
~scribeIf	scribe.h	/^  virtual ~scribeIf() {}$/;"	f	class:scribe::thrift::scribeIf
~scribeMultiface	scribe.h	/^  virtual ~scribeMultiface() {}$/;"	f	class:scribe::thrift::scribeMultiface
~scribeNull	scribe.h	/^  virtual ~scribeNull() {}$/;"	f	class:scribe::thrift::scribeNull
~scribeProcessor	scribe.h	/^  virtual ~scribeProcessor() {}$/;"	f	class:scribe::thrift::scribeProcessor
~scribe_Log_args	scribe.h	/^  virtual ~scribe_Log_args() throw() {}$/;"	f	class:scribe::thrift::scribe_Log_args
~scribe_Log_pargs	scribe.h	/^  virtual ~scribe_Log_pargs() throw() {}$/;"	f	class:scribe::thrift::scribe_Log_pargs
~scribe_Log_presult	scribe.h	/^  virtual ~scribe_Log_presult() throw() {}$/;"	f	class:scribe::thrift::scribe_Log_presult
~scribe_Log_result	scribe.h	/^  virtual ~scribe_Log_result() throw() {}$/;"	f	class:scribe::thrift::scribe_Log_result
